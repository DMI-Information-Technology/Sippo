def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def mapsApiKey = localProperties.getProperty('MAPS_API_KEY')
if (mapsApiKey == null) {
    throw new Error('Google Maps Api Key not configured. Set it in `local_maps.properties` or in the environment variable `MAPS_API_KEY`')
}
def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new FileNotFoundException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}
//def keystoreProperties = new Properties()
//def keystorePropertiesFile = rootProject.file('key.properties')
//if (keystorePropertiesFile.exists()) {
//    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
//}


apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion flutter.compileSdkVersion
//    compileSdkVersion 33
    ndkVersion flutter.ndkVersion
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
//        applicationId "com.example.jobspot"
        applicationId "ly.dmi.sippo"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        //minSdkVersion flutter.minSdkVersion
        minSdkVersion 21
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
//        "applicationName": 'FlutterMultiDexApplication'
        manifestPlaceholders += ["mapsApiKey": mapsApiKey]
    }

//    signingConfigs {
//        release {
//            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
//            storePassword keystoreProperties['storePassword']
//            keyAlias keystoreProperties['keyAlias']
//            keyPassword keystoreProperties['keyPassword']
//        }
//    }
    buildTypes {
        release {
//            signingConfig signingConfigs.release
            minifyEnabled true
            // Unused resources will be removed, resources defined in the res/raw/keep.xml will be kept.
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            crunchPngs false
        }
//        debug {
////            signingConfig signingConfigs.release
//        }
    }

}
dependencies {
    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:32.2.3')
    implementation 'com.android.support:multidex:2.0.1'


    // TODO: Add the dependencies for Firebase products you want to use
    // When using the BoM, don't specify versions in Firebase dependencies
    implementation 'com.google.firebase:firebase-analytics-ktx'


    // Add the dependencies for any other desired Firebase products
    // https://firebase.google.com/docs/android/setup#available-libraries
}
flutter {
    source '../..'
}


//plugins {
//    id "com.android.application"
//    id "kotlin-android"
//    id "dev.flutter.flutter-gradle-plugin"
////    id 'com.android.application'
//    id 'com.google.gms.google-services'
////    id "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
//}
//
//def localProperties = new Properties()
//def localPropertiesFile = rootProject.file('local.properties')
//if (localPropertiesFile.exists()) {
//    localPropertiesFile.withReader('UTF-8') { reader ->
//        localProperties.load(reader)
//    }
//}
//def flutterRoot = localProperties.getProperty('flutter.sdk')
//
//if (flutterRoot == null) {
//    throw new FileNotFoundException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
//}

//
//def mapsApiKey = localProperties.getProperty('MAPS_API_KEY')
//if (mapsApiKey == null) {
//    throw new Error('Google Maps Api Key not configured. Set it in `local_maps.properties` or in the environment variable `MAPS_API_KEY`')
//}
//def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
//if (flutterVersionCode == null) {
//    flutterVersionCode = '1'
//}
//
//def flutterVersionName = localProperties.getProperty('flutter.versionName')
//if (flutterVersionName == null) {
//    flutterVersionName = '1.0'
//}
//
//def keystoreProperties = new Properties()
//def keystorePropertiesFile = rootProject.file('key.properties')
//if (keystorePropertiesFile.exists()) {
//    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
//}
////apply plugin: 'com.android.application'
//////apply plugin: 'com.google.gms.google-services'
////apply plugin: 'kotlin-android'
////apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
//
//android {
//    namespace "ly.dmi.sippo"
//    compileSdkVersion flutter.compileSdkVersion
//    ndkVersion flutter.ndkVersion
//
//    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_1_8
//        targetCompatibility JavaVersion.VERSION_1_8
//    }
//
//    kotlinOptions {
//        jvmTarget = '1.8'
//    }
//
//    sourceSets {
//        main.java.srcDirs += 'src/main/kotlin'
//    }
//
//    defaultConfig {
//        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
//        applicationId "ly.dmi.sippo"
//
//        // You can update the following values to match your application needs.
//        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
////        minSdkVersion flutter.minSdkVersion
//        minSdkVersion 20
//        targetSdkVersion flutter.targetSdkVersion
//        versionCode flutterVersionCode.toInteger()
//        versionName flutterVersionName
//        manifestPlaceholders += ["mapsApiKey": mapsApiKey]
//
//    }
//    signingConfigs {
//        release {
//            keyAlias keystoreProperties['keyAlias']
//            keyPassword keystoreProperties['keyPassword']
//            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
//            storePassword keystoreProperties['storePassword']
//        }
//    }
//    buildTypes {
//        release {
//            // TODO: Add your own signing config for the release build.
//            signingConfig signingConfigs.release
//            minifyEnabled true
//            // Unused resources will be removed, resources defined in the res/raw/keep.xml will be kept.
//            shrinkResources true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            // Signing with the debug keys for now, so `flutter run --release` works.
//            signingConfig signingConfigs.debug
//        }
//        debug {
//            signingConfig signingConfigs.release
//
//        }
//    }
//
//
//}
//
//flutter {
//    source '../..'
//}
//
//dependencies {
//    implementation platform('com.google.firebase:firebase-bom:32.2.3')
//
//
//    // TODO: Add the dependencies for Firebase products you want to use
//    // When using the BoM, don't specify versions in Firebase dependencies
//    implementation 'com.google.firebase:firebase-analytics-ktx'
//
//
//    // Add the dependencies for any other desired Firebase products
//    // https://firebase.google.com/docs/android/setup#available-libraries
//}
